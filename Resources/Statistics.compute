#define NUM_THREADS 16
#define NUM_THREADS_SQR (NUM_THREADS * NUM_THREADS)
#define NUM_THREADS4 4
#define STRIDE_THREADS4 (NUM_THREADS / NUM_THREADS4)
#define FLOAT_TO_INT 255
#define INT_TO_FLOAT (1.0 / FLOAT_TO_INT)
#define FLOAT_TO_HIGH_INT (FLOAT_TO_INT * FLOAT_TO_INT)
#define HIGH_INT_TO_FLOAT (1.0 / FLOAT_TO_HIGH_INT)

#define USE_GAMMA_COLORSPACE

#include "UnityCG.cginc"

#pragma kernel Sum
#pragma kernel Multiply4
#pragma kernel Multiply4x4
#pragma kernel Covariance

uint2 _InputSize;
Texture2D<float4> _InputImage;
StructuredBuffer<float4> _Input4;
StructuredBuffer<float4x4> _Input4x4;

uint2 _OutputSize;
RWStructuredBuffer<float4> _Output4;
RWStructuredBuffer<float4x4> _Output4x4;

float4 _Param0_4;
float4x4 _Param0_4x4;
StructuredBuffer<float4> _ParamBuf0_4;

float4 LoadPixel(int2 id) {
	float4 p = _InputImage[id];
	#if defined(USE_GAMMA_COLORSPACE) && !defined(UNITY_COLORSPACE_GAMMA)
	p.xyz = LinearToGammaSpace(p.xyz);
	#endif
	return p;
}

groupshared uint gtotal[4];

[numthreads(NUM_THREADS,NUM_THREADS,1)]
void Sum(uint3 id : SV_DispatchThreadID, uint gindex : SV_GroupIndex, uint3 gid : SV_GroupID) {
	if (gindex == 0)
		gtotal = (uint[4])0;
	GroupMemoryBarrierWithGroupSync();

	if (all(id.xy < _InputSize)) {
		uint4 pixel = (uint4)round(LoadPixel(id.xy) * FLOAT_TO_INT);
		uint v[4] = (uint[4])pixel;
		for (uint i = 0; i < 4; i++)
			InterlockedAdd(gtotal[i], v[i]);
	}
	GroupMemoryBarrierWithGroupSync();

	if (gindex == 0) {
		uint gindex = gid.x + gid.y * _OutputSize.x;
		float4 v = ((uint4)gtotal) * INT_TO_FLOAT;
		_Output4[gindex] = v;
	}
}

[numthreads(NUM_THREADS,1,1)]
void Multiply4(uint3 id : SV_DispatchThreadID) {
	uint tid = id.x;
	if (tid < _InputSize.x) {
		_Output4[tid] = _Input4[tid] * _Param0_4;
	}
}
[numthreads(NUM_THREADS,1,1)]
void Multiply4x4(uint3 id : SV_DispatchThreadID) {
	uint tid = id.x;
	if (tid < _InputSize.x) {
		_Output4x4[tid] = _Input4x4[tid] * _Param0_4x4;
	}
}

groupshared float4x4 _gcovariance;

[numthreads(NUM_THREADS4,NUM_THREADS4,1)]
void Covariance(uint3 id : SV_DispatchThreadID, uint gindex : SV_GroupIndex, 
		uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID) {
	uint x = gtid.x;
	uint y = gtid.y;
	_gcovariance[y][x] = 0;
	GroupMemoryBarrierWithGroupSync();

	uint3 baseid = gid * uint3(NUM_THREADS, NUM_THREADS, 1);
	for (uint i = 0; i < NUM_THREADS; i++) {
		for (uint j = 0; j < NUM_THREADS; j++) {
			uint3 actid = baseid + uint3(i, j, 0);
			if (all(actid.xy < _InputSize)) {
				float dv[4] = (float[4])(LoadPixel(actid.xy) - _ParamBuf0_4[0]);
				_gcovariance[y][x] += dv[x] * dv[y];
			}
		}
	}
	GroupMemoryBarrierWithGroupSync();

	if (gindex == 0) {
		uint gindex = gid.x + gid.y * _OutputSize.x;
		_Output4x4[gindex] = _gcovariance;
	}
}